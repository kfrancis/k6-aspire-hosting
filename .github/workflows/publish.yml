# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0 # Get all history to allow versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.2.0
      with:
        global-json-file: 'global.json'

    # Create the NuGet packages for all projects
    - name: Pack Core Project
      run: dotnet pack src/K6.Hosting.Core/K6.Hosting.Core.csproj --configuration Release --output ${{ env.NuGetDirectory }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      
    - name: Pack Aspire Project
      run: dotnet pack src/K6.Hosting.Aspire/K6.Hosting.Aspire.csproj --configuration Release --output ${{ env.NuGetDirectory }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      
    - name: Pack Grafana Project
      run: dotnet pack src/K6.Hosting.Outputs.Grafana/K6.Hosting.Outputs.Grafana.csproj --configuration Release --output ${{ env.NuGetDirectory }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
      
    - name: Pack InfluxDB Project
      run: dotnet pack src/K6.Hosting.Outputs.InfluxDB/K6.Hosting.Outputs.InfluxDB.csproj --configuration Release --output ${{ env.NuGetDirectory }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg
  
    # Step to prepare the artifacts by copying *.nupkg and *.snpkg files to a temporary directory
    - name: Prepare Artifacts
      run: |
        mkdir -p ${{ env.NuGetDirectory }}/artifacts
        cp ${{ env.NuGetDirectory }}/*.nupkg ${{ env.NuGetDirectory }}/artifacts
        cp ${{ env.NuGetDirectory }}/*.snupkg ${{ env.NuGetDirectory }}/artifacts

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4.6.0
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: |
          ${{ env.NuGetDirectory }}/artifacts/*.nupkg
          ${{ env.NuGetDirectory }}/artifacts/*.snupkg

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ create_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.2.0

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4.1.8
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet packages
      - name: Validate packages
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")) {
              Write-Host "Validating package: $file"
              meziantou.validate-nuget-package $file --excluded-rules IconMustBeSet
          }

  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4.2.2
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.2.0
      with:
        global-json-file: 'global.json'
    - name: Run tests
      run: dotnet test --configuration Release
      continue-on-error: true  # Allow workflow to continue even if tests fail

  deploy:
    # Publish only when creating a GitHub Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_test ]
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # Get all history to allow versioning using MinVer
        
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4.1.8
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4.2.0
        with:
          global-json-file: 'global.json'

      # Publish all NuGet packages to NuGet.org
      - name: Publish NuGet packages
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              Write-Host "Publishing package: $file"
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
